<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on The Blog of Yongqiang</title>
    <link>https://lostlese.github.io/post/</link>
    <description>Recent content in Posts on The Blog of Yongqiang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 23 Nov 2022 16:24:43 +0800</lastBuildDate><atom:link href="https://lostlese.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Blog_11_23_读者写者问题的三种写法</title>
      <link>https://lostlese.github.io/post/blog_11_23/</link>
      <pubDate>Wed, 23 Nov 2022 16:24:43 +0800</pubDate>
      
      <guid>https://lostlese.github.io/post/blog_11_23/</guid>
      <description>====================================================================== readers are prior [analyse:] writer: can&amp;#39;t write when anyone is reading. exclusive readers: when one of the readers are reading, the readers who want to read can read. but them can&amp;#39;t read when the writer is writing. exclusive the action to change the readcount and the lock made the reader and writer exclusive are exclusive. ====================================================================== //the reason why the readcount is not a semaphore is that it was // a condition ,and not a semaphore make the process exclusive int readcount = 0; semaphore mutex = 1, w = 1; reader(){ while(1){ wait(mutex); if(readcount == 0) wait(w);	\\读者读的时候互斥 readcount++;	signal(mutex); 读； wait(mutex); readcount--; if(readcount == 0) signal(w); signal(mutex);	} } writer(){ while(1){ wait(w); 写； siganl(w); } } ====================================================================== the writer is prior [analyse:] writer: writer is one can write, but them have a list to block.</description>
    </item>
    
    <item>
      <title>关于生产者消费者问题的理解</title>
      <link>https://lostlese.github.io/post/blog5-%E5%89%AF%E6%9C%AC/</link>
      <pubDate>Thu, 17 Nov 2022 23:25:22 +0800</pubDate>
      
      <guid>https://lostlese.github.io/post/blog5-%E5%89%AF%E6%9C%AC/</guid>
      <description>关于生产者消费者问题的理解 1.理论思考
a.生产者消费者问题既包含了进程之间的互斥关系(一组消费者和一组生产者对于缓冲区的操作都是互斥的)，也包含了进程间的同步关系(消费者和生产者之间的通信)，注意empty的判别要写在mutex之前
b.与Java语言中的生产者消费者的对比，Java语言中的synconized锁肯定是来源于操作系统管程的思想，这是毋庸置疑的，而在生消问题实现的过程中，Java使用锁对象的方式将对象交给synconized锁去托管互斥关系，利用wait和notify方法来实现进程直接制约关系，所谓的线程通信。
c.生产者利用wait方法使得当缓冲区满的时候进入永久休眠区，并释放锁的占用以及cpu资源，所以在这里不需要考虑是不是会导致因为wait(empty)导致死锁，因为这里的mutex互斥锁变成了synconized锁托管的对象，当wait()执行的时候进程进入永久休眠区，同时放弃了锁的占用，从而在下一个周期生产者被唤醒，消费者的直接制约实现同理。
d.在信号量实现生消问题的时候，如果把wait(mutex) 和 wait(empty)替换，会导致死锁的原因是，消费者先使用wait(mutex)然后empty等于0的情况下，消费者阻塞，它是放弃了处理机，但是它不像管程同时放弃了锁，导致消费者还被锁着。
ps
Object.wait()方法，会释放锁资源以及CPU资源。
Thread.sleep()方法，不会释放锁资源，但是会释放CPU资源。
首先，wait()方法是让一个线程进入到阻塞状态，而这个方法必须要写在一个Synchronized同步代码块里面。
因为wait/notify是基于共享内存来实现线程通信的工具，这个通信涉及到条件的竞争，所以在调用这两个方法之前必须要竞争锁资源。
当线程调用wait方法的时候，表示当前线程的工作处理完了，意味着让其他竞争同一个共享资源的线程有机会去执行。
但前提是其他线程需要竞争到锁资源，所以wait方法必须要释放锁，否则就会导致死锁的问题。
然后，Thread.sleep()方法，只是让一个线程单纯进入睡眠状态，这个方法并没有强制要求加synchronized同步锁。
而且从它的功能和语义来说，也没有这个必要。
当然，如果是在一个Synchronized同步代码块里面调用这个Thread.sleep，也并不会触发锁的释放。
最后，凡是让线程进入阻塞状态的方法，操作系统都会重新调度实现CPU时间片切换，这样设计的目的是提升CPU的利用率。</description>
    </item>
    
    <item>
      <title>关于生产者消费者问题的理解</title>
      <link>https://lostlese.github.io/post/blog5/</link>
      <pubDate>Thu, 17 Nov 2022 23:25:22 +0800</pubDate>
      
      <guid>https://lostlese.github.io/post/blog5/</guid>
      <description>关于生产者消费者问题的理解 1.理论思考
a.生产者消费者问题既包含了进程之间的互斥关系(一组消费者和一组生产者对于缓冲区的操作都是互斥的)，也包含了进程间的同步关系(消费者和生产者之间的通信)，注意empty的判别要写在mutex之前
b.与Java语言中的生产者消费者的对比，Java语言中的synconized锁肯定是来源于操作系统管程的思想，这是毋庸置疑的，而在生消问题实现的过程中，Java使用锁对象的方式将对象交给synconized锁去托管互斥关系，利用wait和notify方法来实现进程直接制约关系，所谓的线程通信。
c.生产者利用wait方法使得当缓冲区满的时候进入永久休眠区，并释放锁的占用以及cpu资源，所以在这里不需要考虑是不是会导致因为wait(empty)导致死锁，因为这里的mutex互斥锁变成了synconized锁托管的对象，当wait()执行的时候进程进入永久休眠区，同时放弃了锁的占用，从而在下一个周期生产者被唤醒，消费者的直接制约实现同理。
d.在信号量实现生消问题的时候，如果把wait(mutex) 和 wait(empty)替换，会导致死锁的原因是，消费者先使用wait(mutex)然后empty等于0的情况下，消费者阻塞，它是放弃了处理机，但是它不像管程同时放弃了锁，导致消费者还被锁着。
ps
Object.wait()方法，会释放锁资源以及CPU资源。
Thread.sleep()方法，不会释放锁资源，但是会释放CPU资源。
首先，wait()方法是让一个线程进入到阻塞状态，而这个方法必须要写在一个Synchronized同步代码块里面。
因为wait/notify是基于共享内存来实现线程通信的工具，这个通信涉及到条件的竞争，所以在调用这两个方法之前必须要竞争锁资源。
当线程调用wait方法的时候，表示当前线程的工作处理完了，意味着让其他竞争同一个共享资源的线程有机会去执行。
但前提是其他线程需要竞争到锁资源，所以wait方法必须要释放锁，否则就会导致死锁的问题。
然后，Thread.sleep()方法，只是让一个线程单纯进入睡眠状态，这个方法并没有强制要求加synchronized同步锁。
而且从它的功能和语义来说，也没有这个必要。
当然，如果是在一个Synchronized同步代码块里面调用这个Thread.sleep，也并不会触发锁的释放。
最后，凡是让线程进入阻塞状态的方法，操作系统都会重新调度实现CPU时间片切换，这样设计的目的是提升CPU的利用率。</description>
    </item>
    
    <item>
      <title>C&#43;&#43;_vector_1</title>
      <link>https://lostlese.github.io/post/c&#43;&#43;_vector_1/</link>
      <pubDate>Mon, 07 Nov 2022 09:02:54 +0800</pubDate>
      
      <guid>https://lostlese.github.io/post/c&#43;&#43;_vector_1/</guid>
      <description>缓冲
https://blog.csdn.net/lfnlook/article/details/126240726
https://blog.csdn.net/weixin_39633917/article/details/111202858
迭代器失效
https://blog.csdn.net/mingwu96/article/details/123417867?spm=1001.2101.3001.6661.1&amp;amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-123417867-blog-126297986.pc_relevant_multi_platform_whitelistv4&amp;amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-123417867-blog-126297986.pc_relevant_multi_platform_whitelistv4&amp;amp;utm_relevant_index=1
迭代器API
https://blog.csdn.net/qq_48596586/article/details/113784497
1.vector对应的是一个连续的空间但是它可以随着场景变大变小
​ 2.常用函数1
​ ​ ​ ​ 2022/10/31 08:49
战展示push_back()追加
​ c.capcity();
c.max_size();
容器的capacity：当前分配的存储容量，其实也就是当前情况下能够存储的元素个数
容器的size:表示容器中所包含（已经存储）元素的个数；
我们可以通过该模板类提供的成员函数，capacity（）来获得当前容器的容量，以及size（）来获得当前容器的大小\
​ addressof()对对象取址
at() 返回一个pos位置的元素的引用
​ 3.常用函数3
​ ​ 引用可能出现问题
7.2
​ ​ ​ 删除迭代器中的元素
​ ​ ​ 7.7作家
、
​ ​ ​ vector 处理案例学生管理
way1：（裸漏指针）一个学生类，一个管理类，使用for循环
way：（stl抽象方法）函数对象和学生类，使用迭代器
vector 容器的缩水
vector是个只增不减的容器那么如何实现vector的缩水问题
shrink_to_fit()
vector真实内存分配
一个栈上的数组，保存堆上的指针
std: move
move的实质就是把
原先vector栈上的指针指向后面的指针，而新后面的指针指向原先的指针</description>
    </item>
    
    <item>
      <title>MyInfo</title>
      <link>https://lostlese.github.io/post/myinfo/</link>
      <pubDate>Sun, 06 Nov 2022 18:01:57 +0800</pubDate>
      
      <guid>https://lostlese.github.io/post/myinfo/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Blog1</title>
      <link>https://lostlese.github.io/post/blog1/</link>
      <pubDate>Sun, 06 Nov 2022 16:09:22 +0800</pubDate>
      
      <guid>https://lostlese.github.io/post/blog1/</guid>
      <description>酒局游戏 前言 酒局游戏是由2个人以上游玩，由回答者提出一个范围， 出题者在这个范围中设定一个整数值，让回答者进行猜测， 对每次猜出的数给出偏大偏小或是正确的的提示， 注意，当回答者用完10次回答机会或在10次机会回答正确时，游戏结束 一、编译思路 猜数字小游戏（二分法内涵） 思路 1.输入一个范围 2.生成随机数字 3.让用户输入猜的数字， 4.判断正误 如果太大就提示太大 如果太小就提示太小 如果相同就说对了 5.多次循环（10次） 6.直到正确，break跳出循环 7.只能猜测10次，多于10次就break 二、Random类介绍 1.包地址	java.util.Random 2.构造方法 Random​() 创建一个新的随机数生成器。 Random​(long seed) 使用单个 long种子创建一个新的随机数生成器。 3.要用到的产生整型随机数的方法及重载方法 int nextInt​() int nextInt​(int bound) //bound放一个int值范围是 如 bound = 3 时，产生随机数范围是 [0,3) 数学集合中的左闭右开区间 即产生随机数a ，a &amp;lt; 3 &amp;amp;&amp;amp; a &amp;gt;= 0。 代码如下（示例）：
import java.util.Random; /* Random 随机 1.导包 import java.util.Random; 2.创建 Random r = new Random(); // 小括号留空就可以 3.使用 获取一个随机int数字(范围是int所有范围，正负有两种) ： int num = r.</description>
    </item>
    
    <item>
      <title>Spring @Param需要注意</title>
      <link>https://lostlese.github.io/post/blog/</link>
      <pubDate>Sun, 06 Nov 2022 15:38:33 +0800</pubDate>
      
      <guid>https://lostlese.github.io/post/blog/</guid>
      <description>1传输多参数时 @param每个都需要标记
2.当传输单个参数时候 @param不需要标记 *当其为引用类型甚至还可以自动分配 但是
当你传输多个参数引用类型将不会自动分配！！！！
此时需要 ~end</description>
    </item>
    
  </channel>
</rss>
